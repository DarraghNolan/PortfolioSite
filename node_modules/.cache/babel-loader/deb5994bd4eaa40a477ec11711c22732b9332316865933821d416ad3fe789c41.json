{"ast":null,"code":"var _jsxFileName = \"E:\\\\BackUp Transport\\\\OutsideProjects\\\\PortfolioSite\\\\src\\\\pages\\\\AddNotes.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"../axios\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport \"../style.css\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddNote = () => {\n  _s();\n  const [newnote, setNote] = useState({\n    Title: \"\",\n    Description: \"\",\n    ReportAuthor: \"\",\n    TimeCreated: \"\",\n    LastEdited: \"\",\n    Date: \"\"\n  });\n  const navigate = useNavigate();\n  const handleChange = e => {\n    setNote(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  const getCurrentTime = () => {\n    const currentDateTime = new Date();\n    currentDateTime.setHours(currentDateTime.getHours());\n    const year = currentDateTime.getFullYear();\n    const month = (currentDateTime.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\n    const day = currentDateTime.getDate().toString().padStart(2, '0');\n    const hours = currentDateTime.getHours().toString().padStart(2, '0');\n    const minutes = currentDateTime.getMinutes().toString().padStart(2, '0');\n    const seconds = currentDateTime.getSeconds().toString().padStart(2, '0');\n    const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    return formattedDateTime;\n  };\n  const handleClick = async e => {\n    e.preventDefault();\n    try {\n      newnote.ReportAuthor = currentUser.Name;\n      newnote.ShopId = currentUser.ShopId;\n      const currentTime = getCurrentTime(); // Get the current time\n      newnote.TimeCreated = currentTime; // Assign it to TimeCreated\n      newnote.LastEdited = currentTime; // Assign it to TimeCreated\n\n      if (newnote.Date === \"\") {\n        newnote.Date = currentTime;\n      }\n      await axios.post(\"/notes\", newnote);\n\n      // Fetch all notes to find the one with the highest ID\n      const response = await axios.get(\"/notes\");\n      const notes = response.data;\n      const newNoteId = Math.max(...notes.map(note => note.id)); // Find highest ID\n\n      navigate(`/updatenote/${newNoteId}`);\n    } catch (err) {\n      console.log(\"The Note Report was not logged...\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add New Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        onChange: handleChange,\n        name: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dateInput\",\n        type: \"date\",\n        onChange: handleChange,\n        name: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Details:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        className: \"formDetails\",\n        minRows: 3,\n        maxRows: 10,\n        onChange: handleChange,\n        placeholder: \"Details\",\n        name: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        className: \"defaultBtn\",\n        id: \"exportPDFBtn\",\n        children: [\"Add Tags\", /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"defaultIcon\",\n          src: require('../imgs/Edit.png'),\n          alt: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AddNote, \"vU4i2FGDwV78OS2y93+O+vzGh9I=\", false, function () {\n  return [useNavigate];\n});\n_c = AddNote;\nexport default AddNote;\nvar _c;\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"names":["axios","useState","useEffect","useNavigate","React","TextareaAutosize","jsxDEV","_jsxDEV","AddNote","_s","newnote","setNote","Title","Description","ReportAuthor","TimeCreated","LastEdited","Date","navigate","handleChange","e","prev","target","name","value","currentUser","JSON","parse","localStorage","getItem","getCurrentTime","currentDateTime","setHours","getHours","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","minutes","getMinutes","seconds","getSeconds","formattedDateTime","handleClick","preventDefault","Name","ShopId","currentTime","post","response","get","notes","data","newNoteId","Math","max","map","note","id","err","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","minRows","maxRows","onClick","src","require","alt","_c","$RefreshReg$"],"sources":["E:/BackUp Transport/OutsideProjects/PortfolioSite/src/pages/AddNotes.jsx"],"sourcesContent":["import axios from \"../axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport \"../style.css\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\nconst AddNote = () => {\r\n  const [newnote, setNote] = useState({\r\n    Title: \"\",\r\n    Description: \"\",\r\n    ReportAuthor: \"\",\r\n    TimeCreated: \"\",\r\n    LastEdited: \"\",\r\n    Date: \"\"\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    setNote((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const getCurrentTime = () => {\r\n    const currentDateTime = new Date();\r\n    currentDateTime.setHours(currentDateTime.getHours()); \r\n\r\n    const year = currentDateTime.getFullYear();\r\n    const month = (currentDateTime.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\r\n    const day = currentDateTime.getDate().toString().padStart(2, '0');\r\n    const hours = currentDateTime.getHours().toString().padStart(2, '0');\r\n    const minutes = currentDateTime.getMinutes().toString().padStart(2, '0');\r\n    const seconds = currentDateTime.getSeconds().toString().padStart(2, '0');\r\n    \r\n    const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n    \r\n    return formattedDateTime;\r\n  };\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      newnote.ReportAuthor = currentUser.Name;\r\n      newnote.ShopId = currentUser.ShopId;\r\n\r\n      const currentTime = getCurrentTime(); // Get the current time\r\n      newnote.TimeCreated = currentTime; // Assign it to TimeCreated\r\n      newnote.LastEdited = currentTime; // Assign it to TimeCreated\r\n\r\n      if(newnote.Date === \"\"){\r\n        newnote.Date = currentTime;\r\n      }\r\n      \r\n      await axios.post(\"/notes\", newnote);\r\n\r\n      // Fetch all notes to find the one with the highest ID\r\n      const response = await axios.get(\"/notes\");\r\n      const notes = response.data;\r\n      const newNoteId = Math.max(...notes.map((note) => note.id)); // Find highest ID\r\n\r\n      navigate(`/updatenote/${newNoteId}`);\r\n    } catch (err) {\r\n      console.log(\"The Note Report was not logged...\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <article className=\"form\">\r\n      <div>\r\n        <h1>Add New Note</h1>\r\n        <p>Title:</p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          onChange={handleChange}\r\n          name=\"Title\"\r\n        />\r\n        <p>Date:</p>\r\n        <input\r\n          id=\"dateInput\"\r\n          type=\"date\"\r\n          onChange={handleChange}\r\n          name=\"Date\"\r\n        />\r\n        <p>Details:</p>\r\n        <TextareaAutosize\r\n          className=\"formDetails\"\r\n          minRows={3}\r\n          maxRows={10}\r\n          onChange={handleChange}\r\n          placeholder='Details'\r\n          name=\"Description\"\r\n        />\r\n\r\n        <button onClick={handleClick} className='defaultBtn' id=\"exportPDFBtn\">\r\n          Add Tags\r\n          <img className=\"defaultIcon\" src={require('../imgs/Edit.png')} alt=\"Edit\"/>\r\n        </button>\r\n      </div>      \r\n    </article>\r\n  );\r\n};\r\n\r\nexport default AddNote;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}